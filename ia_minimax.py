# -*- coding: utf-8 -*-
"""IA-MINIMAX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-ncP-7nKp06THVDCWiizmqt44w7F_ae
"""

import random

# Função para exibir o tabuleiro
def exibir_tabuleiro(tabuleiro):
    print("-------------")
    for i in range(3):
        print("|", end=" ")
        for j in range(3):
            print(tabuleiro[i][j], end=" | ")
        print("\n-------------")

# Função para verificar se o jogador ganhou
def verificar_vitoria(tabuleiro, jogador):
    # Verificar linhas
    for i in range(3):
        if tabuleiro[i][0] == tabuleiro[i][1] == tabuleiro[i][2] == jogador:
            return True

    # Verificar colunas
    for i in range(3):
        if tabuleiro[0][i] == tabuleiro[1][i] == tabuleiro[2][i] == jogador:
            return True

    # Verificar diagonais
    if tabuleiro[0][0] == tabuleiro[1][1] == tabuleiro[2][2] == jogador:
        return True
    if tabuleiro[0][2] == tabuleiro[1][1] == tabuleiro[2][0] == jogador:
        return True

    return False

# Função para verificar se há empate
def verificar_empate(tabuleiro):
    return ' ' not in [celula for linha in tabuleiro for celula in linha]

# Função para fazer a jogada do jogador humano
def fazer_jogada(tabuleiro, jogador):
    while True:
        linha = int(input("Digite o número da linha (0-2): "))
        coluna = int(input("Digite o número da coluna (0-2): "))

        if linha < 0 or linha > 2 or coluna < 0 or coluna > 2:
            print("Jogada inválida! Tente novamente.")
            continue

        if tabuleiro[linha][coluna] != ' ':
            print("Posição ocupada! Tente novamente.")
            continue

        tabuleiro[linha][coluna] = jogador
        break

# Função para fazer a jogada da IA usando o algoritmo Minimax
def fazer_jogada_ia(tabuleiro, jogador):
    # Função para calcular a pontuação da jogada no algoritmo Minimax
    def pontuacao_jogada(tabuleiro, profundidade, jogador_max, jogador_min):
        if verificar_vitoria(tabuleiro, jogador_max):
            return 10 - profundidade
        elif verificar_vitoria(tabuleiro, jogador_min):
            return profundidade - 10
        else:
            return 0

    # Função do algoritmo Minimax
    def minimax(tabuleiro, profundidade, maximizando):
        jogador_max = jogador
        jogador_min = 'X' if jogador == 'O' else 'O'

        if verificar_vitoria(tabuleiro, jogador_max):
            return pontuacao_jogada(tabuleiro, profundidade, jogador_max, jogador_min)
        elif verificar_vitoria(tabuleiro, jogador_min):
            return pontuacao_jogada(tabuleiro, profundidade, jogador_max, jogador_min)
        elif verificar_empate(tabuleiro):
            return 0

        if maximizando:
            melhor_pontuacao = float('-inf')
            for i in range(3):
                for j in range(3):
                    if tabuleiro[i][j] == ' ':
                        tabuleiro[i][j] = jogador_max
                        pontuacao = minimax(tabuleiro, profundidade + 1, False)
                        tabuleiro[i][j] = ' '
                        melhor_pontuacao = max(pontuacao, melhor_pontuacao)
            return melhor_pontuacao
        else:
            melhor_pontuacao = float('inf')
            for i in range(3):
                for j in range(3):
                    if tabuleiro[i][j] == ' ':
                        tabuleiro[i][j] = jogador_min
                        pontuacao = minimax(tabuleiro, profundidade + 1, True)
                        tabuleiro[i][j] = ' '
                        melhor_pontuacao = min(pontuacao, melhor_pontuacao)
            return melhor_pontuacao

    # Encontrar a melhor jogada usando o algoritmo Minimax
    melhor_pontuacao = float('-inf')
    melhor_jogada = None

    for i in range(3):
        for j in range(3):
            if tabuleiro[i][j] == ' ':
                tabuleiro[i][j] = jogador
                pontuacao = minimax(tabuleiro, 0, False)
                tabuleiro[i][j] = ' '

                if pontuacao > melhor_pontuacao:
                    melhor_pontuacao = pontuacao
                    melhor_jogada = (i, j)

    if melhor_jogada:
        tabuleiro[melhor_jogada[0]][melhor_jogada[1]] = jogador
    else:
        fazer_jogada_ia(tabuleiro, jogador)  # Faz jogada aleatória se não houver uma melhor jogada

# Função principal do jogo
def jogar_jogo_da_velha():
    tabuleiro = [[' ' for _ in range(3)] for _ in range(3)]
    jogadores = ['X', 'O']
    jogador_atual = random.choice(jogadores)

    while True:
        exibir_tabuleiro(tabuleiro)
        print("Jogador atual:", jogador_atual)

        if jogador_atual == 'X':
            fazer_jogada(tabuleiro, jogador_atual)
        else:
            fazer_jogada_ia(tabuleiro, jogador_atual)

        if verificar_vitoria(tabuleiro, jogador_atual):
            exibir_tabuleiro(tabuleiro)
            print("O jogador", jogador_atual, "venceu!")
            break
        elif verificar_empate(tabuleiro):
            exibir_tabuleiro(tabuleiro)
            print("O jogo terminou em empate!")
            break

        jogador_atual = 'O' if jogador_atual == 'X' else 'X'

# Iniciar o jogo
jogar_jogo_da_velha()